{
  "openapi": "3.0.1",
  "info": {
    "title": "2ristPanel RESTful B2C API",
    "description": "\r\n<h3><a target=\"_blank\" href=\"https://www.aparat.com/v/I5EP3\">ویدیو آموزشی به زبان فارسی</a></h3>\r\n<div>\r\n    <p>The 2ristPanel API allows you to programmatically access to your account with ease.</p>\r\n    <h1 id=\"overview\">Overview</h1>\r\n    <ol>\r\n        <li>\r\n            <p>You need a valid <a href=\"#authentication\">Bearer jwt Token</a> to send requests to the API endpoints. You can get your public and private key from the <a target=\"_blank\" href=\"https://app.2ristpanel.com/Main/Panel/Profile/ApiManagements\">Api Key Managements</a>.</p>\r\n        </li>\r\n        <li>\r\n            <p>The API has an access <a href=\"#time-limits\">Time Limit</a> applied to it.</p>\r\n        </li>\r\n        <li>\r\n            <p>The 2ristPanel API will only respond to secured communication done over HTTPS. HTTP requests will be sent a <code>301</code> redirect to corresponding HTTPS resources.</p>\r\n        </li>\r\n        <li>\r\n            <p>The API calls will respond with appropriate <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">HTTP status codes</a> for all requests. Within 2ristPanel Client, when a response is received, the status code is highlighted and is accompanied by a help text that indicates the possible meaning of the response code. A <code>200 OK</code> indicates all went well, while <code>4XX</code> or <code>5XX</code> response codes indicate an error from the requesting client or our API servers respectively.</p>\r\n        </li>\r\n    </ol>\r\n    <h1 id=\"authentication\">Authentication</h1>\r\n    <p>An Bearer jwt Token is required to be sent as part of every request to the 2ristPanel API, in the form of an <code>Authorization : Bearer yJhbIkpXCJ9.eyJVc2VyS....... </code> request header.</p>\r\n    <blockquote>\r\n        <p>If you do not have an API Key, you can easily generate one by heading over to the <a href=\"https://app.2ristpanel.com/Main/Panel/Profile/ApiManagements\">Api Key Managements</a></p>\r\n    </blockquote>\r\n    <p>\r\n        An API Public and Private Key tells our API server that the request it received came from you.\r\n        <br />\r\n        you can genrate new token via <a href=\"#operations-API-post_v1_API_GenerateNewToken\">GenerateNewToken</a> Method\r\n        <br />\r\n    </p>\r\n    <h2 id=\"api-key-related-error-response\">API Key related error response</h2>\r\n    <p>If an API Key is missing, malformed, or invalid, you will receive a <code>401 Unauthorised</code> response code and the following JSON response:</p>\r\n    <pre class=\"  language-undefined\"><code class=\"language-undefined\">\r\n    {\r\n    \"message\": \"The Authorization Token is missing Or does not send in the header.\",\r\n    \"title\": \"SessionRevokingMessage\",\r\n    \"notificationViewType\": 1,\r\n    \"notificationType\": 2,\r\n    \"state\": false\r\n    }\r\n</code></pre>\r\n    <h1 id=\"time-limits\">Time Limits</h1>\r\n    <p>After receiving a new token you will have <code>3 minutes</code> to use the token. After the specified time the token will be expired and you must create a new token</p>\r\n</div>\r\n\r\n<h1 id=\"terms-of-use\">API Url's</h1>\r\n\r\n<table>\r\n    <thead>\r\n    <th>API Type</th>\r\n    <th>API URL</th>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>Test</td>\r\n            <td>https://beta-api.2ristpanel.com</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Production</td>\r\n            <td>https://api.2ristpanel.com</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<h1 id=\"dev-env\">Development</h1>\r\n\r\nFor Test Purposes, Download Environment and collection below and import it in Postman\r\n<br />\r\nEnvironment : <a target=\"_blank\" href=\"docs/development.postman_environment.json\">Development Environment</a> (Note That these values are only valid in the demo version\r\n)\r\n<br />\r\nCollection : <a target=\"_blank\" href=\"docs/b2c.postman_collection.json\">Postman Collection</a>\r\n\r\n<table>\r\n    <thead>\r\n    <th>VARIABLE</th>\r\n    <th>INITIAL VALUE</th>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>baseUrl</td>\r\n            <td>https://beta-api.2ristpanel.com</td>\r\n        </tr>\r\n        <tr>\r\n            <td>publicKey</td>\r\n            <td>28GW9JEROEY5BDN</td>\r\n        </tr>\r\n        <tr>\r\n            <td>privateKey</td>\r\n            <td>8059c822-4205-472d-bc40-c5e8669af403</td>\r\n        </tr>\r\n        <tr>\r\n            <td>authorization</td>\r\n            <td></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<h1 id=\"ok-result\">\r\n    Responses and Errors\r\n</h1>\r\n\r\nResult of Response 200 can be an object with the requested content or an error.\r\nYou can see the list of known errors below\r\n\r\n\r\n<table>\r\n    <thead>\r\n    <th>Code</th>\r\n    <th>Description</th>\r\n    <th>توضیحات</th>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>100</td>\r\n            <td>There is a problem with one of the Unique IDs sent. The name of the ID is mentioned in the error</td>\r\n            <td>ایرادی در یکی از آیدی های یونیک ارسالی وجود دارد. نام آی دی در ارور ذکر شده است</td>\r\n        </tr>\r\n        <tr>\r\n            <td>101</td>\r\n            <td>The requested number of one of the tickets is more than the inventory. The name of the requested ticket and the remaining number are mentioned in the error.</td>\r\n            <td>تعداد درخواستی یکی از تیکت ها بیشتر از  موجودی میباشد نام تیکت درخواستی و تعداد باقی مانده در ارور ذکر شده است</td>\r\n        </tr>\r\n        <tr>\r\n            <td>102</td>\r\n            <td>The requested service requires the names of the passengers. Please send the relevant field in a completed form. The service name is listed in the error</td>\r\n            <td>برنامه درخواستی نیاز به اسامی مسافران دارد لطفا فیلد مربوطه را به صورت تکمیل شده ارسال نمایید نام برنامه در ارور ذکر شده است</td>\r\n        </tr>\r\n        <tr>\r\n            <td>103</td>\r\n            <td>The requested service requires the names of the passengers along with the national code or passport number and its type. Please send the relevant field in a completed form. The service name is listed in the error</td>\r\n            <td>\r\n                سرویس درخواستی، نیاز به اسامی مسافران به همراه کد ملی یا شماره پاسپورت و نوع آن دارد لطفا فیلد مربوطه را به صورت تکمیل شده ارسال نمایید. نام سرویس در ارور ذکر شده است\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>104</td>\r\n            <td>\r\n                There is a problem with opening the cash desk automatically.\r\n                Please make sure that in the panel settings, the cash desk closure is activated automatically, and if         you have the open cash desk, close it and send the request again.\r\n            </td>\r\n            <td>\r\n                ایرادی در باز نمودن صندوق فروش به صورت اتوماتیک به وجود آمده است.\r\n                لطفا اطمینان حاصل نمایید که در تنظیمات پنل، بسته شدن صندوق فروش به صورت اتوماتیک فعال است و در صورتی که صندوق باز دارید آن را بسته و مجددا درخواست را ارسال نمایید.\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>105</td>\r\n            <td>The temporary reservation reference has a problem, has been canceled or has been used before, please note that temporary reservations only take up to 30 minutes, after which your reference will be invalidated.</td>\r\n            <td>رفرنس رزرو موقت ایراد دارد، باطل شده و یا قبلا استفاده شده است است لطفا توجه داشته باشید که رزرو های موقت فقط تا 30 دقیقه زمان دارند و بعد از آن رفرنس شما باطل میشود  </td>\r\n        </tr>\r\n        <tr>\r\n            <td>106</td>\r\n            <td>You are allowed to book 7 items at a time and 15 tickets per item at each request. This error indicates that you have requested more than the specified number.</td>\r\n            <td>شما در هر درخواست اجازه رزرو موقت 7 آیتم و در هر آیتم 15 بلیط را دارا هستید این ارور نشان دهنده این است که شما بیش از تعداد ذکر شده درخواست داده اید</td>\r\n        </tr>\r\n        <tr>\r\n            <td>107</td>\r\n            <td>Booking time is over</td>\r\n            <td>زمان رزرو موقت به پایان رسیده است</td>\r\n        </tr>\r\n        <tr>\r\n            <td>108</td>\r\n            <td>The problem is with the information sent to the passenger list. Please check the manifest and send data again</td>\r\n            <td>ایراد مربوط به اطلاعات ارسالی در لیست مسافرین است. لطفا لیست را بررسی و مجددا ارسال نمایید</td>\r\n        </tr>\r\n        <tr>\r\n            <td>109</td>\r\n            <td>Your purchase credit on the panel is over or less than allowed. Please check and charge your credit</td>\r\n            <td>اعتبار خرید شما در پنل به اتمام رسیده یا کمتر از حد مجاز میباشد لطفا اعتبار خود را بررسی و شارژ نمایید</td>\r\n        </tr>\r\n        <tr>\r\n            <td>110</td>\r\n            <td>This license Is not valid on this Service or not valid at all</td>\r\n            <td>مجوز ارسالی برای این برنامه اعتبار ندارد</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<h1 id=\"support\">Support</h1>\r\n<p>For help regarding accessing the 2ristPanel API, feel free to drop a ticket at our <a target=\"_blank\" href=\"https://support.2ristpanel.ir\">Support</a> system.</p>\r\n<p>In the event you receive a <code>503</code> response from our servers, it implies that we have hit an unexpected spike in API access traffic and would usually be operational within the next 5 minutes. If the outage persists, or your receive any other form of <code>5XX</code> error, kindly let us know.</p>\r\n\r\n\r\n<h1 id=\"terms-of-use\">Developer And Ownership Details</h1>\r\n\r\nLicenced To:\r\n<a href=\"http://ttgroup.ir/\" target=\"_blank\">Top Tours Group</a> / <a href=\"http://toptis.ir/\" target=\"_blank\">TopTis.co</a>\r\n<br />\r\nDeveloped By:\r\n<a href=\"https://pooriashariatzadeh.com\" target=\"_blank\">Pooria Shariatzadeh</a>\r\n\r\n",
    "contact": {
      "name": "Pooria Shariatzadeh",
      "url": "https://www.pooriashariatzadeh.com",
      "email": "Pooria.Shariatzadeh@gmail.com"
    },
    "license": {
      "name": "Copyright © 2020 TopTis co",
      "url": "http://TopTis.com"
    },
    "version": "1.3.0"
  },
  "paths": {
    "/v1/API/GenerateNewToken": {
      "post": {
        "tags": [
          "API"
        ],
        "summary": "GenerateNewToken",
        "requestBody": {
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/prs.odatatestxx-odata": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetApiToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAuthorizationToken"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/GetActiveDestinations": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Active Destinations",
        "description": "It will send you all the tourist destinations that are active in the system along with the required IDs.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActiveDestinations"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/GetActiveLicences": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Active Licences",
        "description": "It will send you all your active licenses",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Licence"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/GetWalletsBalance": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Wallets Balance",
        "description": "It will send you the balance of the system wallet and all other wallets (please note that it is very important to keep your wallet charged at all times so that your customers' purchases do not face problems)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActiveDestinations"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/ServicesDetailAsync": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Services Detail",
        "description": "This method sends you a paginated list of all services with complete specifications",
        "parameters": [
          {
            "name": "CityCode",
            "in": "query",
            "description": "Optional",
            "schema": {
              "type": "integer",
              "description": "Optional",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "StateCode",
            "in": "query",
            "description": "Optional",
            "schema": {
              "type": "integer",
              "description": "Optional",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "HasActiveSans",
            "in": "query",
            "description": "Optional",
            "schema": {
              "type": "boolean",
              "description": "Optional",
              "default": false
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "The value of this field is 1 by default. You can change this value to get the next pages (Required)",
            "schema": {
              "type": "integer",
              "description": "The value of this field is 1 by default. You can change this value to get the next pages (Required)",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/GetAllServicesAsync": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "All Services",
        "description": "This method will send you a list of all services with the minimum information needed for the next steps.\r\nAnd you can filter this method by provided params",
        "parameters": [
          {
            "name": "CityCode",
            "in": "query",
            "description": "Optional",
            "schema": {
              "type": "integer",
              "description": "Optional",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "StateCode",
            "in": "query",
            "description": "Optional",
            "schema": {
              "type": "integer",
              "description": "Optional",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "HasActiveSans",
            "in": "query",
            "description": "Optional",
            "schema": {
              "type": "boolean",
              "description": "Optional",
              "default": false
            }
          },
          {
            "name": "EventType",
            "in": "query",
            "description": "Optional",
            "schema": {
              "$ref": "#/components/schemas/EventType"
            }
          },
          {
            "name": "EventCategory",
            "in": "query",
            "description": "Optional",
            "schema": {
              "$ref": "#/components/schemas/EventCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceList"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/GetServiceAsync": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Service",
        "description": "This method sends complete information about the requested service",
        "parameters": [
          {
            "name": "ServiceUniqueId",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "string",
              "description": "Required",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/GetAvailableSansAsync": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Available Sans",
        "description": "With this method, after sending the required values of ServiceUniqueId and LicenseUniqueId, Get Result of all the event sans and ticket types of a service that are needed for temporary booking.",
        "parameters": [
          {
            "name": "ServiceUniqueId",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "string",
              "description": "Required",
              "format": "uuid"
            }
          },
          {
            "name": "LicenseUniqueId",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "string",
              "description": "Required",
              "format": "uuid"
            }
          },
          {
            "name": "PersianDate",
            "in": "query",
            "description": "By sending the PersianDate (optional), you can receive the desired event sans of that day \r\nSample : 1399/10/22",
            "schema": {
              "type": "string",
              "description": "By sending the PersianDate (optional), you can receive the desired event sans of that day \r\nSample : 1399/10/22",
              "nullable": true
            }
          },
          {
            "name": "TicketTypeUniqueIds",
            "in": "query",
            "description": "By sending the TicketTypeUniqueIds (optional), you can filter the desired ticket types. All you have to do is separate the type of tickets you want with ',' and send them as a string\r\nSample : e8161576-a229-4d6d-9053-3380d482278e,9d29c72e-c9e4-4906-aed1-ca2379ced03f",
            "schema": {
              "type": "string",
              "description": "By sending the TicketTypeUniqueIds (optional), you can filter the desired ticket types. All you have to do is separate the type of tickets you want with ',' and send them as a string\r\nSample : e8161576-a229-4d6d-9053-3380d482278e,9d29c72e-c9e4-4906-aed1-ca2379ced03f",
              "nullable": true
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "To receive the data in batches of 15, it is enough to send the desired page. If the page is not sent, all available event sans will be returned. (optional)",
            "schema": {
              "type": "integer",
              "description": "To receive the data in batches of 15, it is enough to send the desired page. If the page is not sent, all available event sans will be returned. (optional)",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SansList"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/CheckItemAvailabilityAsync": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Check Item Availability",
        "description": "You can use this method to ensure that the item can be booked before temporary booking",
        "parameters": [
          {
            "name": "TicketTypeUniqueId",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "string",
              "description": "Required",
              "format": "uuid"
            }
          },
          {
            "name": "SansUniqueId",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "string",
              "description": "Required",
              "format": "uuid"
            }
          },
          {
            "name": "LicenseUniqueId",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "string",
              "description": "Required",
              "format": "uuid"
            }
          },
          {
            "name": "Number",
            "in": "query",
            "description": "Number of tickets requested (Required)",
            "schema": {
              "type": "integer",
              "description": "Number of tickets requested (Required)",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAvailabilityResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/TempBookingAsync": {
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "Temp Booking",
        "description": "<br>After selecting the type of ticket and event sans's desired by the user for temporary reservation, you can use this method\r\n<br>FullName and mobilePhone are required\r\n<br>In the bookItems array, you can send a maximum of 7 Sans, and in each Sans, you can send a maximum of 15 tickets.If the number of tickets or the number of Sans is more than the allowed limit, your temporary reservation will not be made.\r\n<br>Please note that if the value of isManifestNeeded in the GetServiceAsync method is equal to true, you must send the list of names of the passengers in the manifest field equal to the number of requested tickets.\r\n<br>Also, if the field isManifestUniqueNumberNeeded is equal to true, the two fields uniqueNumberType and uniqueNumber should be sent.\r\n<br>The value of uniqueNumberType, if the type is uniqueNumber, is the national code of Iran 1 and the passport number 2 should be sent.",
        "requestBody": {
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/prs.odatatestxx-odata": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TempBookingResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/CreateTempShoppingCartForSalonSeatReservation": {
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "Create Temp ShoppingCart For Salon Seat Reservation",
        "description": "After you submit your request to create a new shopping cart, \r\nsalon url back to you by the result and Then you can display the link in the iframe to call the final method after the user seat selection session is over.",
        "requestBody": {
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/prs.odatatestxx-odata": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewShoppingCartForSalonSeatReservationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TempShoppingCartResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/GetTempReservedItems": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Temp Reserved Items",
        "description": "After submitting a request to create  a Temporary Shopping Cart, You can retrieve a list of booked items with this method.",
        "parameters": [
          {
            "name": "TempShoppingCartUniqueId",
            "in": "query",
            "description": "TempShoppingCartUniqueId is present at TempBookingAsync And CreateTempShoppingCartForSalonSeatReservation Result (Required)",
            "schema": {
              "type": "string",
              "description": "TempShoppingCartUniqueId is present at TempBookingAsync And CreateTempShoppingCartForSalonSeatReservation Result (Required)",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TempReservedItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/GetSalonViewOnlyUrl": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Get Salon View-Only URL",
        "description": "This method returns a web address with which you can only view the hall (reserved seats).",
        "parameters": [
          {
            "name": "LicenseUniqueId",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "string",
              "description": "Required",
              "format": "uuid"
            }
          },
          {
            "name": "SansUniqueId",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "string",
              "description": "Required",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/CancelingTempBookingAsync": {
      "delete": {
        "tags": [
          "Booking"
        ],
        "summary": "Canceling Temp Bookings",
        "description": "If the user cancels his purchase or for any reason you do not need the shopping cart, use this method to cancel your temporary reservation. Note that providers can view the behavior of temporary reservations.\r\nSo if you make a lot of temporary reservations, suppliers will be able to block their services on you.",
        "parameters": [
          {
            "name": "TempBookingReference",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "string",
              "description": "Required",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/B2C/Booking/FinalizingBookingAsync": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Finalizing Booking",
        "description": "After your user returns from the payment gateway and his payment is confirmed by your server, you can use this method to finalize the user's temporary reservation.",
        "parameters": [
          {
            "name": "TempBookingReference",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "string",
              "description": "Required",
              "nullable": true
            }
          },
          {
            "name": "DiscountAmount",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "number",
              "description": "Required",
              "format": "double"
            }
          },
          {
            "name": "SendSMS",
            "in": "query",
            "description": "Required",
            "schema": {
              "type": "boolean",
              "description": "Required"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinalizingBookingResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OKResult"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GetApiToken": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "nullable": true
          },
          "privateKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiAuthorizationToken": {
        "type": "object",
        "properties": {
          "authorization": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultNotificationViewType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ResultNotificationType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "OKResult": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "title": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true,
            "readOnly": true
          },
          "notificationViewType": {
            "$ref": "#/components/schemas/ResultNotificationViewType"
          },
          "notificationType": {
            "$ref": "#/components/schemas/ResultNotificationType"
          },
          "state": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ActiveDestinations": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "titleNative": {
            "type": "string",
            "nullable": true
          },
          "stateCode": {
            "type": "integer",
            "format": "int64"
          },
          "cityCode": {
            "type": "integer",
            "format": "int64"
          },
          "activityCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Licence": {
        "type": "object",
        "properties": {
          "licenceUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "issuedBy": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferenceTicketType": {
        "type": "object",
        "properties": {
          "ticketTypeUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Service": {
        "type": "object",
        "properties": {
          "serviceUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "eventCategory": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rules": {
            "type": "string",
            "nullable": true
          },
          "coverImage": {
            "type": "string",
            "nullable": true
          },
          "gallery": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isManifestNeeded": {
            "type": "boolean"
          },
          "isManifestUniqueNumberNeeded": {
            "type": "boolean"
          },
          "licences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Licence"
            },
            "nullable": true
          },
          "ticketTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceTicketType"
            },
            "nullable": true
          },
          "hasActiveSans": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EventType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "EventCategory": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ],
        "type": "integer",
        "format": "int32"
      },
      "ServiceList": {
        "type": "object",
        "properties": {
          "serviceUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "eventType": {
            "$ref": "#/components/schemas/EventType"
          },
          "eventCategory": {
            "$ref": "#/components/schemas/EventCategory"
          }
        },
        "additionalProperties": false
      },
      "TicketType": {
        "type": "object",
        "properties": {
          "ticketTypeUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "commission": {
            "type": "number",
            "format": "double"
          },
          "remaining": {
            "type": "integer",
            "format": "int32"
          },
          "customTitle": {
            "type": "string",
            "nullable": true
          },
          "discountAmount": {
            "type": "number",
            "format": "double"
          },
          "discountPercent": {
            "type": "number",
            "format": "float"
          },
          "priceAfterDiscount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SansList": {
        "type": "object",
        "properties": {
          "sansUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "type": "string",
            "nullable": true
          },
          "start": {
            "type": "string",
            "nullable": true
          },
          "end": {
            "type": "string",
            "nullable": true
          },
          "remainingCapacity": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "ticketTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ItemAvailabilityResult": {
        "type": "object",
        "properties": {
          "isAvailable": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "persianDateTime": {
            "type": "string",
            "nullable": true
          },
          "ticketPrice": {
            "type": "number",
            "format": "double"
          },
          "priceAfterDiscount": {
            "type": "number",
            "format": "double"
          },
          "remaining": {
            "type": "integer",
            "format": "int32"
          },
          "ticketTypeUniqueId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "UniqueNumberType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ManifestDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "uniqueNumber": {
            "type": "string",
            "nullable": true
          },
          "uniqueNumberType": {
            "$ref": "#/components/schemas/UniqueNumberType"
          }
        },
        "additionalProperties": false
      },
      "BookItem": {
        "required": [
          "licenseUniqueId",
          "sansUniqueId",
          "ticketTypeUniqueId"
        ],
        "type": "object",
        "properties": {
          "licenseUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "sansUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "ticketTypeUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "manifest": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManifestDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookingDto": {
        "required": [
          "fullName",
          "mobilePhone"
        ],
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string"
          },
          "mobilePhone": {
            "pattern": "^([0-9]{11})$",
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "residence": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "internalInvoiceNumber": {
            "type": "string",
            "nullable": true
          },
          "bookItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TempBookingResult": {
        "type": "object",
        "properties": {
          "tempBookingReference": {
            "type": "string",
            "nullable": true
          },
          "expireDateTime": {
            "type": "string",
            "nullable": true
          },
          "expireDateTimeUTC": {
            "type": "string",
            "format": "date-time"
          },
          "tempShoppingCartUniqueId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateNewShoppingCartForSalonSeatReservationDto": {
        "required": [
          "fullName",
          "mobilePhone"
        ],
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string"
          },
          "mobilePhone": {
            "pattern": "^([0-9]{11})$",
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "residence": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "internalInvoiceNumber": {
            "type": "string",
            "nullable": true
          },
          "sansUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "licenseUniqueId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "TempShoppingCartResult": {
        "type": "object",
        "properties": {
          "expireDateTime": {
            "type": "string",
            "nullable": true
          },
          "salonUrl": {
            "type": "string",
            "nullable": true
          },
          "tempBookingReference": {
            "type": "string",
            "nullable": true
          },
          "tempShoppingCartUniqueId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "TempReservedItem": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "persianDateTime": {
            "type": "string",
            "nullable": true
          },
          "ticketPrice": {
            "type": "number",
            "format": "double"
          },
          "ticketNumber": {
            "type": "integer",
            "format": "int32"
          },
          "priceAfterDiscount": {
            "type": "number",
            "format": "double"
          },
          "serviceUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "sansUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "licenseUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "ticketTypeUniqueId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "TicketsLink": {
        "type": "object",
        "properties": {
          "sansUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "link": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FinalizingBookingResult": {
        "type": "object",
        "properties": {
          "bookingReference": {
            "type": "string",
            "nullable": true
          },
          "ticketsLink": {
            "type": "string",
            "nullable": true
          },
          "eventsTickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketsLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
